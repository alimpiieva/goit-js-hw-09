{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAoCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA7CAO,SAASC,cAAc,SAI/BC,iBAAiB,UAAU,SAASC,GACvCA,EAAMC,iBAEN,MAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBAErCO,EAAQC,OAAOJ,EAAWK,OAC1BC,EAAOF,OAAOH,EAAUI,OACxBE,EAASH,OAAOF,EAAYG,OAElC,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,GAAU,EACrCC,EAAAxB,GAASyB,OAAOC,QAAQ,0CAI1B,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAQI,IAAK,CAChC,IAAIC,EAAeT,GAASQ,EAAI,GAAKL,EACrCpB,EAAcyB,EAAGC,GACdC,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBoB,EAAAxB,GAASyB,OAAOK,QAAQ,uBAAqB3B,QAAiBC,MAAU,IAEzE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBoB,EAAAxB,GAASyB,OAAOO,QAAQ,sBAAoB7B,QAAeC,MAAU,IAEtE6B,SAAQ,KACPL,GAAgBN,CAAI,G","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\n\nimport Notiflix from \"notiflix\";\n\nform.addEventListener('submit', function(event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  if (delay < 0 || step < 0 || amount <= 0) {\n    Notiflix.Notify.warning('All values must be greater than 0');\n    return;\n  }\n\n  for (let i = 1; i <= amount; i++) {\n    let currentDelay = delay + (i - 1) * step;\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      })\n      .finally(() => {\n        currentDelay += step;\n      });\n  }\n});\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","delay1","Number","value","step","amount","$parcel$interopDefault","Notify","warning","i","currentDelay","then","success","catch","failure","finally"],"version":3,"file":"03-promises.053e851f.js.map"}